{"version":3,"sources":["nameList.js","NameButton.jsx","GroupArea.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NameButton","props","document","addEventListener","event","preventDefault","Row","className","Col","Card","draggable","onDragStart","e","target","dataTransfer","setData","id","setTimeout","onDragOver","stopPropagation","bg","color","text","onContextMenu","toggleColor","name","GroupArea","gcc","globalGroupConfig","nameDisplay","groupConfig","map","i","key","students","colorConfig","console","log","onDrop","card_id","getData","getElementById","distributeClicked","Object","keys","forEach","g","indexOf","splice","removeFromIncList","setSeeded","groupNo","push","setGlobalGroupConfig","sm","children","App","studentColors","colorConfigInit","nameList","n","useState","setColorConfig","student_id","colorConfigTemp","length","numStudents","k","numGroups","setNumGroups","groupsOf","setGroupsOf","groupsOfButtonDisplay","Array","Math","floor","Button","variant","onClick","getNumGroups","incList","setIncList","exList","setExList","getInitGroupConfig","initGroupConfig","setGroupConfig","setDistributeClicked","useEffect","studentId","includes","tmpList","dragOver","groupDisplay","Container","md","window","location","reload","card","appendChild","concat","groupConfigTemp","studentArrIdx","j","random","temp","pop","querySelector","querySelectorAll","remove","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c34f770.chunk.js","sourcesContent":["// import faker from 'faker';\nconst nameList = [\"Clara Keebler\",\n    \"Brandy Reichel\",\n    \"Ben Satterfield\", \"Grant McClure\", \"Charlie Jacobs\", \"Pam Hane\", \"Jeffrey Powlowski\", \"Bridget Murray\", \"Todd Boehm IV\", \"Kristin Nicolas\", \"Stella Reilly\", \"Dana Reichert\", \"Lyle Hettinger\", \"Jeffery Greenholt\", \"Erma Bosco\", \"Mark Keeling\"\n];\n\nmodule.exports = nameList;","import React, { useState } from 'react'\nimport { Badge, Button, Card, Col, Row } from 'react-bootstrap'\n\nexport default function NameButton(props) {\n\n    document.addEventListener('contextmenu', event => event.preventDefault());\n\n    const dragStart = (e) => {\n        const target = e.target;\n        e.dataTransfer.setData('card_id', target.id)\n        setTimeout(() => {\n            // target.style.display=\"none\";\n        }, 0);\n    }\n\n    const dragOver = e => {\n        e.stopPropagation();\n\n    }\n\n\n    return (\n        <Row className=\"\">\n            <Col className=\"\">\n                <Card\n                    className=\"p-1 mt-1 text-center name__tag\"\n                    // variant=\"success\"\n                    draggable=\"true\"\n                    onDragStart={dragStart}\n                    onDragOver={dragOver}\n                    id={props.id}\n                    bg={props.color}\n                    text=\"white\"\n                    onContextMenu={()=>(props.toggleColor(props.id))}\n                >\n                    {props.name}\n                </Card>\n\n            </Col>\n        </Row>\n    )\n}\n","import React, { useState } from 'react'\nimport { Col } from 'react-bootstrap'\nimport NameButton from './NameButton';\n\nexport default function GroupArea(props) {\n    let gcc = {...props.globalGroupConfig};\n    const drop = (e) => {\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n        const card = document.getElementById(card_id);\n        // card.style.display = 'block';\n        // e.target.appendChild(card)\n\n\n        //Update Global Group Config upon drop\n        // 1 \n        //      if distributeClicked - search and remove from old group\n        //      else - remove from incList removeFromIncList(id)\n\n        if (props.distributeClicked) {\n            //for each key in globalgroupconfig\n            //if id exists, splice\n            Object.keys(gcc).forEach(g => {\n                if (gcc[g].indexOf(card_id) >= 0) {\n                    gcc[g].splice(gcc[g].indexOf(card_id), 1)\n                }\n            })\n        } else {    //distribute not clicked yet\n            props.removeFromIncList(card_id)\n            props.setSeeded(true);\n        }\n\n        // 2 - add into this group\n        gcc[props.groupNo - 1].push(card_id)\n        props.setGlobalGroupConfig(gcc);\n        console.log(props.globalGroupConfig)\n    }\n\n    const dragOver = e => {\n        e.preventDefault();\n    }\n\n    let nameDisplay = (\n        props.groupConfig.map(i => (\n            <NameButton\n                key={i}\n                id={i}\n                name={props.students[i]}\n                color={props.colorConfig[i]}\n                toggleColor={props.toggleColor}\n            />\n        ))\n    )\n\n    console.log(\"GROUPAREA\")\n    console.log(props.groupConfig)\n    return (\n        <Col\n            onDrop={drop}\n            onDragOver={dragOver}\n            sm={3}\n            className=\"group__area p-3 m-1\">\n            {props.groupNo}\n            {props.children}\n            {nameDisplay}\n        </Col>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Col, Container, Row, ButtonGroup, ToggleButton } from 'react-bootstrap';\nimport nameList from './nameList'\nimport NameButton from './NameButton';\nimport GroupArea from './GroupArea';\n\nfunction App() {\n\n    const studentColors = [\"success\", \"warning\", \"danger\"]\n\n\n    //Generate students object from students names\n    let students = {};\n    let colorConfigInit = {}\n    nameList.forEach((n, i) => {\n        students[i + 999] = n;\n        colorConfigInit[i + 999] = studentColors[0];\n    });\n\n    const [colorConfig, setColorConfig] = useState(colorConfigInit);\n\n\n    let toggleColor = (student_id) => {\n        let colorConfigTemp = { ...colorConfig }\n        colorConfigTemp[student_id] = studentColors[(studentColors.indexOf(colorConfigTemp[student_id]) + 1) % studentColors.length]\n        setColorConfig(colorConfigTemp)\n    }\n\n\n    const [numStudents, setNumStudents] = useState(nameList.length)\n\n    //Display Names\n    let nameDisplay = (\n        Object.keys(students).map((k) => (\n            <NameButton\n                key={k}\n                id={k}\n                name={students[k]}\n                color={colorConfig[k]}\n                toggleColor={toggleColor}\n            />\n        ))\n    )\n\n    // Group settings\n    const [numGroups, setNumGroups] = useState(0);\n    const [groupsOf, setGroupsOf] = useState(2);\n\n    //Display GroupsOf Button\n    const groupsOfButtonDisplay = (\n        [...Array(Math.floor(numStudents / 2) - 1).keys()].map(i => (\n            <Button\n                key={i}\n                variant=\"dark\"\n                onClick={() => setGroupsOf(i + 2)}\n                className=\"mr-1\"\n            >\n                {i + 2}\n            </Button>\n        ))\n    )\n\n    //Helper Function to get Number of Groups\n    let getNumGroups = (n) => {\n        let numGroups = Math.floor(incList.length / n);\n        return numGroups\n    }\n\n\n    //Array of student indexes included\n    const [incList, setIncList] = useState(Object.keys(students));\n    //Array of student indexes excluded\n    const [exList, setExList] = useState([]);\n\n    //Initialize group config - the list of indexes in each group\n    let getInitGroupConfig = (numGroups) => {\n        let initGroupConfig = {};\n\n        [...Array(numGroups).keys()].forEach(g => {\n            initGroupConfig[g] = []\n        })\n\n        // console.log(initGroupConfig);\n        return initGroupConfig;\n    }\n    let initGroupConfig = getInitGroupConfig(getNumGroups(groupsOf));\n\n    const [groupConfig, setGroupConfig] = useState(initGroupConfig)\n    const [distributeClicked, setDistributeClicked] = useState(false);\n    const [seeded, setSeeded] = useState(false);\n\n    //Update number of groups given change in set groupsof \n    useEffect(() => {\n        setNumGroups(getNumGroups(groupsOf));\n        setGroupConfig(getInitGroupConfig(getNumGroups(groupsOf)));\n        console.log(\"INCLIST\")\n        console.log(incList)\n        console.log(\"NUMGROUPS\")\n        console.log(numGroups)\n    }\n        , [groupsOf, incList, numGroups])\n\n\n    //Dropping into the Include Area\n    const dropInclude = (e) => {\n\n        //Attach child when dropped into area\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n        const card = document.getElementById(card_id);\n        e.target.appendChild(card)\n\n        //Update group config states\n\n        //Remove from exclude list if found, add to includelist\n        if (exList.includes(card_id)) {\n            let tmpList = exList;\n            tmpList.splice(tmpList.indexOf(card_id), 1);\n            setExList(tmpList);\n        }\n\n        //Add name to include list if not already there\n        if (!incList.includes(card_id)) {\n            setIncList(incList.concat([card_id]))\n        }\n\n        //Reset number of groups\n        setNumGroups(getNumGroups(groupsOf));\n    }\n\n    //Helper Function - Remove from Inclist\n    let removeFromIncList = (studentId) => {\n        if (incList.includes(studentId)) {\n            let tmpList = incList;\n            tmpList.splice(tmpList.indexOf(studentId), 1);\n            setIncList(tmpList);\n        }\n        console.log(\"removing from inclist\")\n        console.log(incList)\n    }\n\n    //Dropping into the Exclude Area\n    const dropExclude = (e) => {\n\n        //Attach child when dropped into area\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n        const card = document.getElementById(card_id);\n        e.target.appendChild(card)\n\n        //Remove From Include List if found Insert to Exclude List\n        removeFromIncList(card_id);\n\n        //Add name to exclude list if not already there\n        if (!exList.includes(card_id)) {\n            setExList(exList.concat([card_id]))\n        }\n\n        //Reset number of groups\n        setNumGroups(getNumGroups(groupsOf));\n\n    }\n\n    //Drag and drop function\n    const dragOver = e => {\n        e.preventDefault();\n    }\n\n    //Button to reset page\n    const refreshPage = () => {\n        window.location.reload();\n    }\n\n\n    //Assign students\n    const assignStudents = () => {\n\n        //Copy current groupConfig\n        let groupConfigTemp = {};\n        //if distribute clicked, reset groupConfig first before redistributing, else just copy existing config\n        groupConfigTemp = distributeClicked ? getInitGroupConfig(getNumGroups(groupsOf)) : { ...groupConfig }\n        // groupConfigTemp = seeded ? {...groupConfig} : getInitGroupConfig(getNumGroups(groupsOf))\n        //Random sort incList\n        let studentArrIdx = [...incList];\n        console.log(\"student array index\")\n        console.log(studentArrIdx)\n        //Fisher-Yates Algo\n        for (let i = studentArrIdx.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i)\n            const temp = studentArrIdx[i]\n            studentArrIdx[i] = studentArrIdx[j]\n            studentArrIdx[j] = temp\n        }\n\n        //Insert min number of students into each group\n        Object.keys(groupConfigTemp).forEach(k => {\n            while (groupConfigTemp[k].length < groupsOf) {\n                groupConfigTemp[k].push(studentArrIdx.pop())\n            }\n        })\n        console.log(groupConfigTemp);\n        //If there are leftovers, insert them round robin style\n        let key = 0;\n        while (studentArrIdx.length > 0) {\n            groupConfigTemp[key].push(studentArrIdx.pop())\n            key = (key + 1) % numGroups;\n        }\n\n        console.log(groupConfigTemp);\n        //Update groupConfig with new groupings\n        setGroupConfig(groupConfigTemp);\n\n        document.querySelector(\".include__list\").querySelectorAll(\".name__tag\").forEach(e => e.remove());\n\n        //Set seeded to false\n        setSeeded(false);\n\n        //Set Distributed clicked to true\n        setDistributeClicked(true);\n    }\n\n    //Display Group Area\n    let groupDisplay = (\n        [...Array(numGroups).keys()].map(g => (\n            <GroupArea\n                key={g}\n                groupNo={g + 1}\n                groupConfig={groupConfig[g]}\n                incList={incList}\n                students={students}\n                globalGroupConfig={groupConfig}\n                setGlobalGroupConfig={setGroupConfig}\n                distributeClicked={distributeClicked}\n                removeFromIncList={removeFromIncList}\n                setSeeded={setSeeded}\n                colorConfig={colorConfig}\n                toggleColor={toggleColor}\n            />\n        ))\n    )\n\n\n    return (\n        <Container>\n            <Row>\n                <Col className=\"text-center my-2\">\n                    <h1>REGROUP</h1>\n                    <small><i>Right click on names to toggle colors.</i></small>\n                    <hr/>\n                </Col>\n            </Row>\n            <Row className=\"\">\n                <Col md={4} className=\"text-center\">\n                    <Row className=\"my-2\">\n                        <Col>\n                            <Button variant=\"danger\" onClick={refreshPage}>Reset All</Button>\n                        </Col>\n                    </Row>\n                    <Row>\n\n                        <Col\n                            className=\"p-3 include__list mx-1 text-center\"\n                            onDrop={dropInclude}\n                            onDragOver={dragOver}\n                        >\n                            Include ({incList.length})\n\n                            {nameDisplay}\n                        </Col>\n                        <Col\n                            className=\"p-3 exclude__area mx-1 text-center\"\n                            onDrop={dropExclude}\n                            onDragOver={dragOver}\n                        >\n                            Exclude ({exList.length})\n\n                        </Col>\n\n                    </Row>\n                </Col>\n                <Col md={8} className=\"\">\n                    <Row className=\"text-center\">\n                        <Col>\n                            <Row>\n                                <Col>\n                                    Students per Group: {groupsOf} <br />\n\n                                    {groupsOfButtonDisplay}\n\n                                </Col>\n\n                            </Row>\n                            <Row className=\"mt-3\">\n                                <Col>\n                                    <Button\n                                        variant=\"primary\"\n                                        onClick={assignStudents}\n                                    >Distribute</Button>\n                                </Col>\n                            </Row>\n                            <Row className=\"mt-3\">\n                                <Col>\n\n                                    Number of Groups: {numGroups}\n\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-center\">\n                        {/* <Col> */}\n                        {groupDisplay}\n                        {/* </Col> */}\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}